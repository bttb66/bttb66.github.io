'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onPostBuild = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var onPostBuild = exports.onPostBuild = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref, pluginOptions) {
    var graphql = _ref.graphql;

    var userOptions, defaultOptions, mergedOptions, _ref3, siteUrl, policy, sitemap, host, output, configFile, content, filename;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            userOptions = getOptions(pluginOptions);
            defaultOptions = {
              output: '/robots.txt'
            };
            mergedOptions = (0, _assign2.default)({}, defaultOptions, userOptions);

            if (!(!mergedOptions.hasOwnProperty('host') || !mergedOptions.hasOwnProperty('sitemap'))) {
              _context.next = 10;
              break;
            }

            _context.next = 6;
            return runQuery(graphql, query);

          case 6:
            _ref3 = _context.sent;
            siteUrl = _ref3.site.siteMetadata.siteUrl;


            mergedOptions.host = siteUrl;
            mergedOptions.sitemap = _url2.default.resolve(siteUrl, 'sitemap.xml');

          case 10:
            policy = mergedOptions.policy, sitemap = mergedOptions.sitemap, host = mergedOptions.host, output = mergedOptions.output, configFile = mergedOptions.configFile;
            _context.next = 13;
            return (0, _generateRobotstxt2.default)({
              policy: policy,
              sitemap: sitemap,
              host: host,
              configFile: configFile
            });

          case 13:
            content = _context.sent;
            filename = _path2.default.join(publicPath, output);
            _context.next = 17;
            return writeFile(_path2.default.resolve(filename), content);

          case 17:
            return _context.abrupt('return', _context.sent);

          case 18:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function onPostBuild(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _generateRobotstxt = require('generate-robotstxt');

var _generateRobotstxt2 = _interopRequireDefault(_generateRobotstxt);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var publicPath = './public';
var query = '{\n  site {\n    siteMetadata {\n      siteUrl\n    }\n  }\n}\n';
var defaultEnv = 'development';

function writeFile(file, data) {
  return new _promise2.default(function (resolve, reject) {
    _fs2.default.writeFile(file, data, function (err) {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

function runQuery(handler, query) {
  return handler(query).then(function (res) {
    if (res.errors) {
      throw new Error(res.errors.join(', '));
    }

    return res.data;
  });
}

var getOptions = function getOptions(pluginOptions) {
  var options = (0, _assign2.default)({}, pluginOptions);

  delete options.plugins;

  var _options$env = options.env,
      env = _options$env === undefined ? {} : _options$env,
      _options$resolveEnv = options.resolveEnv,
      resolveEnv = _options$resolveEnv === undefined ? function () {
    return process.env.NODE_ENV;
  } : _options$resolveEnv;


  var envOptions = env[resolveEnv()] || env[defaultEnv] || {};

  delete options.env;
  delete options.resolveEnv;

  return (0, _assign2.default)({}, options, envOptions);
};
//# sourceMappingURL=gatsby-node.js.map