{"version":3,"sources":["src/gatsby-node.js"],"names":["pluginOptions","graphql","userOptions","getOptions","defaultOptions","output","mergedOptions","hasOwnProperty","runQuery","query","siteUrl","site","siteMetadata","host","sitemap","resolve","policy","configFile","content","filename","join","publicPath","writeFile","onPostBuild","defaultEnv","file","data","reject","err","handler","then","res","errors","Error","options","plugins","env","resolveEnv","process","NODE_ENV","envOptions"],"mappings":"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","file":"gatsby-node.js","sourcesContent":["import fs from 'fs';\nimport robotsTxt from 'generate-robotstxt';\nimport path from 'path';\nimport url from 'url';\n\nconst publicPath = './public';\nconst query = `{\n  site {\n    siteMetadata {\n      siteUrl\n    }\n  }\n}\n`;\nconst defaultEnv = 'development';\n\nfunction writeFile(file, data) {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(file, data, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nfunction runQuery(handler, query) {\n  return handler(query).then(res => {\n    if (res.errors) {\n      throw new Error(res.errors.join(', '));\n    }\n\n    return res.data;\n  });\n}\n\nconst getOptions = pluginOptions => {\n  const options = { ...pluginOptions };\n\n  delete options.plugins;\n\n  const { env = {}, resolveEnv = () => process.env.NODE_ENV } = options;\n\n  const envOptions = env[resolveEnv()] || env[defaultEnv] || {};\n\n  delete options.env;\n  delete options.resolveEnv;\n\n  return { ...options, ...envOptions };\n};\n\nexport async function onPostBuild({ graphql }, pluginOptions) {\n  const userOptions = getOptions(pluginOptions);\n\n  const defaultOptions = {\n    output: '/robots.txt'\n  };\n\n  const mergedOptions = { ...defaultOptions, ...userOptions };\n\n  if (\n    !mergedOptions.hasOwnProperty('host') ||\n    !mergedOptions.hasOwnProperty('sitemap')\n  ) {\n    const {\n      site: {\n        siteMetadata: { siteUrl }\n      }\n    } = await runQuery(graphql, query);\n\n    mergedOptions.host = siteUrl;\n    mergedOptions.sitemap = url.resolve(siteUrl, 'sitemap.xml');\n  }\n\n  const { policy, sitemap, host, output, configFile } = mergedOptions;\n\n  const content = await robotsTxt({\n    policy,\n    sitemap,\n    host,\n    configFile\n  });\n  const filename = path.join(publicPath, output);\n\n  return await writeFile(path.resolve(filename), content);\n}\n"]}